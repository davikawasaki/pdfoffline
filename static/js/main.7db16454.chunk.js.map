{"version":3,"sources":["withRoot.js","services/PDFService.js","components/FilesDragDrop/FilesDragDrop.js","pages/index.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","indigo","main","dark","secondary","red","typography","useNextVariants","withRoot","Component","props","react_default","a","createElement","core_styles","CssBaseline_default","PDFService","mergeBetweenPDF","pdfFileList","length","FileReader","onload","evt","console","log","target","result","pdfDoc","PDFDocumentFactory","create","pdfFilePromiseArrayBufferList","forEach","pdfFile","push","fetch","URL","createObjectURL","then","res","arrayBuffer","Promise","all","pdfArrayBufferFileList","pdfArrayBuffer","load","Uint8Array","getPages","pdfPage","addPage","PDFDocumentWriter","saveToBytes","FilesDragDrop","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFilesChange","files","setState","hasFiles","state","onFilesError","error","file","code","message","filesRemoveOne","removeFile","filesRemoveAll","startMerge","fileName","Date","toISOString","replace","saveSync","catch","err","finally","classes","_this2","className","Grid_default","container","spacing","justify","item","dropFilesGridZone","dist_default","dropFilesZone","onChange","onError","accepts","multiple","maxFiles","maxFileSize","minFileSize","clickable","dropFilesZoneDiv","map","key","id","name","sizeReadable","onClick","bind","dropFilesWarningGridZone","Button_default","variant","color","disabled","React","withStyles","width","padding","border","display","flexWrap","boxSizing","textAlign","fontWeight","appBar","position","icon","marginRight","unit","heroUnit","backgroundColor","background","paper","heroContent","maxWidth","margin","concat","heroButtons","marginTop","layout","defineProperty","marginLeft","breakpoints","up","cardGrid","card","height","flexDirection","cardMedia","paddingTop","cardContent","flexGrow","footer","Fragment","AppBar_default","Toolbar_default","Typography_default","noWrap","component","align","gutterBottom","components_FilesDragDrop_FilesDragDrop","Boolean","window","location","hostname","match","ReactDOM","render","pages","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7db16454.chunk.js","sourcesContent":["import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/indigo';\n// import green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: indigo[300],\n      main: indigo[500],\n      dark: indigo[700],\n    },\n    secondary: {\n      light: red[300],\n      main: red[500],\n      dark: red[700],\n    }\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <MuiThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;\n","import { PDFDocumentFactory, PDFDocumentWriter } from 'pdf-lib';\r\n\r\nfunction mergeBetweenPDF(pdfFileList) {\r\n    if (pdfFileList.length > 0) {\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onload = function(evt) { console.log(evt.target.result); };\r\n\r\n\t\tconst pdfDoc = PDFDocumentFactory.create();\r\n\t\t// let iterPdfDocBytes;\r\n\t\tlet iterPdfDoc;\r\n\t\tlet pdfFilePromiseArrayBufferList = [];\r\n\t\tlet iterPdfDocPages = [];\r\n\r\n\t\t// Get all file URLs into a list using Promises and fetch API\r\n\t\tpdfFileList.forEach((pdfFile) => {\r\n\t\t\tpdfFilePromiseArrayBufferList.push(\r\n\t\t\t\tfetch(URL.createObjectURL(pdfFile))\r\n\t\t\t\t\t.then(res => res.arrayBuffer())\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\treturn Promise\r\n\t\t\t.all(pdfFilePromiseArrayBufferList)\r\n\t\t\t.then((pdfArrayBufferFileList) => {\r\n\t\t\t\tpdfArrayBufferFileList.forEach((pdfArrayBuffer) => {\r\n\t\t\t\t\tconsole.log(pdfArrayBuffer)\r\n\t\t\t\t\t// iterPdfDocBytes = reader.readAsArrayBuffer(pdfBlob)\r\n\t\t\t\t\titerPdfDoc = PDFDocumentFactory.load(new Uint8Array(pdfArrayBuffer))\r\n\t\t\t\t\titerPdfDocPages = iterPdfDoc.getPages()\r\n\t\t\t\t\titerPdfDocPages.forEach((pdfPage) => {\r\n\t\t\t\t\t\tpdfDoc.addPage(pdfPage)\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn PDFDocumentWriter.saveToBytes(pdfDoc);\r\n\t\t\t})\r\n    }\r\n}\r\n\r\nexport default {\r\n\tmergeBetweenPDF\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import withRoot from '../../withRoot';\r\nimport Files from 'react-files';\r\nimport PDFService from '../../services/PDFService';\r\nimport { saveSync } from 'save-file'\r\n\r\nconst styles = theme => ({\r\n\tdropFilesGridZone: {\r\n\t\twidth: '70%'\r\n\t},\r\n\tdropFilesZone: {\r\n\t\tpadding: '2em',\r\n\t\tborder: '2px dashed rgba(0, 0, 0, .1)',\r\n\t\tcolor: 'rgba(0, 0, 0, .4)',\r\n\t\twidth: '100%',\r\n\t\tdisplay: 'flex',\r\n\t\tflexWrap: 'wrap',\r\n\t\tboxSizing: 'border-box',\r\n\t\ttextAlign: 'center'\r\n\t},\r\n\tdropFilesZoneDiv: {\r\n\t\twidth: '100%'\r\n\t},\r\n\tdropFilesWarningGridZone: {\r\n\t\twidth: '70%',\r\n\t\ttextAlign: 'center',\r\n\t\tcolor: 'red',\r\n\t\tfontWeight: 'bold'\r\n\t},\r\n});\r\n\r\nclass FilesDragDrop extends React.Component {\r\n  constructor (props) {\r\n      super(props)\r\n      this.state = {\r\n          files: [],\r\n\t\t  hasFiles: false\r\n      }\r\n\t  this.classes = props.classes\r\n  }\r\n\r\n  // state = {\r\n  //   files: [],\r\n\t// hasFiles: false\r\n  // }\r\n\r\n  onFilesChange = (files) => {\r\n      this.setState({\r\n          files,\r\n\t\t  hasFiles: files.length > 0 ? true : false\r\n      }, () => {\r\n          console.log(this.state)\r\n      })\r\n\r\n      // this.setState({value: event.target.value}, function () {\r\n      //     console.log(this.state.value);\r\n      // });\r\n  }\r\n\r\n  onFilesError = (error, file) => {\r\n      console.log('error code ' + error.code + ': ' + error.message)\r\n  }\r\n\r\n  filesRemoveOne = (file) => {\r\n      this.state.files.removeFile(file)\r\n  }\r\n\r\n  filesRemoveAll = () => {\r\n      this.setState({\r\n          files: [],\r\n\t\t  hasFiles: false\r\n      }, () => {\r\n          console.log(this.state)\r\n      })\r\n  }\r\n\r\n  startMerge = () => {\r\n\t  this.setState({\r\n          files: this.state.files,\r\n\t\t  hasFiles: false\r\n      }, () => {\r\n          console.log(\"Starting merge...\")\r\n      })\r\n\r\n\t  PDFService.mergeBetweenPDF(this.state.files)\r\n\t  \t.then((res) => {\r\n\t\t\t// console.log(res)\r\n\t\t\tconst fileName = \"output_merge_\" + new Date().toISOString().replace(\":\",\"_\").replace(\"T\",\"_\").replace(\"Z\",\"\") + \".pdf\"\r\n\t\t\tsaveSync(res, fileName)\r\n\t\t\tconsole.log(\"Merge successfull and downloaded!\")\r\n\t\t\t// FileSaver.saveAs(res, 'foo.pdf')\r\n\t\t})\r\n\t\t.catch((err) => console.log(err))\r\n\t\t.finally(() => this.filesRemoveAll())\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"files\">\r\n        <Grid container spacing={32} justify=\"center\">\r\n          <Grid item className={this.classes.dropFilesGridZone}>\r\n            <Files\r\n              className={this.classes.dropFilesZone}\r\n              onChange={this.onFilesChange}\r\n              onError={this.onFilesError}\r\n              accepts={['.pdf']}\r\n              multiple\r\n              maxFiles={1000}\r\n              maxFileSize={10000000}\r\n              minFileSize={0}\r\n              clickable\r\n            >\r\n              <div className={this.classes.dropFilesZoneDiv}>Drop files here or click to upload</div>\r\n            </Files>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={32} justify=\"center\">\r\n          {\r\n            this.state.files.length > 0\r\n            ?\r\n\t\t\t<Grid item className={this.classes.dropFilesGridZone}>\r\n\t\t\t\t<div className='files-list'>\r\n\t              <ul>{this.state.files.map((file) =>\r\n\t                <li className='files-list-item' key={file.id}>\r\n\t                  <div className='files-list-item-content'>\r\n\t                    <div className='files-list-item-content-item files-list-item-content-item-1'>{file.name}</div>\r\n\t                    <div className='files-list-item-content-item files-list-item-content-item-2'>{file.sizeReadable}</div>\r\n\t                  </div>\r\n\t                  <div\r\n\t                    id={file.id}\r\n\t                    className='files-list-item-remove'\r\n\t                    onClick={this.filesRemoveOne.bind(this, file)} // eslint-disable-line\r\n\t                  />\r\n\t                </li>\r\n\t              )}</ul>\r\n\t            </div>\r\n\t\t\t</Grid>\r\n            :\r\n\t\t\t<Grid item className={this.classes.dropFilesWarningGridZone}>\r\n\t\t\t\t<div className='files-list'>\r\n\t            \tNo files selected!\r\n\t            </div>\r\n\t\t\t</Grid>\r\n          }\r\n        </Grid>\r\n\r\n        <Grid container spacing={16} justify=\"center\">\r\n\t        <Grid item>\r\n\t\t\t\t<Button variant=\"contained\" color=\"primary\"\r\n\t\t\t\t\tdisabled={!this.state.hasFiles}\r\n\t\t\t\t\tonClick={this.startMerge}>\r\n\t\t\t\t\tStart merge\r\n\t\t\t\t</Button>\r\n\t        </Grid>\r\n\t\t\t<Grid item>\r\n\t\t\t\t<Button variant=\"outlined\" color=\"secondary\" onClick={this.filesRemoveAll}>\r\n\t\t\t\t  \tClear selection\r\n\t\t\t\t</Button>\r\n\t\t\t</Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { name: 'MuiFilesDragDrop' })(FilesDragDrop);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import classNames from 'classnames';\nimport AppBar from '@material-ui/core/AppBar';\n// import Button from '@material-ui/core/Button';\n// import Card from '@material-ui/core/Card';\n// import CardActions from '@material-ui/core/CardActions';\n// import CardContent from '@material-ui/core/CardContent';\n// import CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n// import Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport withRoot from '../withRoot';\nimport FilesDragDrop from '../components/FilesDragDrop';\n\nconst styles = theme => ({\n  appBar: {\n    position: 'relative',\n  },\n  icon: {\n    marginRight: theme.spacing.unit * 2,\n  },\n  heroUnit: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  heroContent: {\n    maxWidth: 600,\n    margin: '0 auto',\n    padding: `${theme.spacing.unit * 8}px 0 ${theme.spacing.unit * 6}px`,\n  },\n  heroButtons: {\n    marginTop: theme.spacing.unit * 4,\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(1100 + theme.spacing.unit * 3 * 2)]: {\n      width: 1100,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  cardGrid: {\n    padding: `${theme.spacing.unit * 8}px 0`,\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing.unit * 6,\n  },\n});\n\n// const cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nfunction Index(props) {\n  const { classes } = props;\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            DS.MK\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroUnit}>\n          <div className={classes.heroContent}>\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Merge your PDFs\n            </Typography>\n            {\n              // <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\n              //   Something short and leading about the collection below—its contents, the creator, etc.\n              //   Make it short and sweet, but not too short so folks don&apos;t simply skip over it\n              //   entirely.\n              // </Typography>\n            }\n            <div className={classes.heroButtons}>\n              <FilesDragDrop>\n              </FilesDragDrop>\n\n            </div>\n          </div>\n        </div>\n        {\n          // <div className={classNames(classes.layout, classes.cardGrid)}>\n          //   {/* End hero unit */}\n          //   <Grid container spacing={40}>\n          //     {cards.map(card => (\n          //       <Grid item key={card} sm={6} md={4} lg={3}>\n          //         <Card className={classes.card}>\n          //           <CardMedia\n          //             className={classes.cardMedia}\n          //             image=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22288%22%20height%3D%22225%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20288%20225%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_164edaf95ee%20text%20%7B%20fill%3A%23eceeef%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A14pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_164edaf95ee%22%3E%3Crect%20width%3D%22288%22%20height%3D%22225%22%20fill%3D%22%2355595c%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2296.32500076293945%22%20y%3D%22118.8%22%3EThumbnail%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\" // eslint-disable-line max-len\n          //             title=\"Image title\"\n          //           />\n          //           <CardContent className={classes.cardContent}>\n          //             <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          //               Heading\n          //             </Typography>\n          //             <Typography>\n          //               This is a media card. You can use this section to describe the content.\n          //             </Typography>\n          //           </CardContent>\n          //           <CardActions>\n          //             <Button size=\"small\" color=\"primary\">\n          //               View\n          //             </Button>\n          //             <Button size=\"small\" color=\"primary\">\n          //               Edit\n          //             </Button>\n          //           </CardActions>\n          //         </Card>\n          //       </Grid>\n          //     ))}\n          //   </Grid>\n          // </div>\n        }\n      </main>\n      {/* Footer */}\n      {\n        // <footer className={classes.footer}>\n        //   <Typography variant=\"h6\" align=\"center\" gutterBottom>\n        //     Footer\n        //   </Typography>\n        //   <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n        //     Something here to give the footer a purpose!\n        //   </Typography>\n        // </footer>\n      }\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n\nIndex.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(withStyles(styles)(Index));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Index from './pages/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}